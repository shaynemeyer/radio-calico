name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: radiocalico_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests via Make
        run: make test
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: radiocalico_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
      
      - name: Run all tests via Make
        run: make test-all
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: radiocalico_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
      
      - name: Generate test coverage
        run: make test-coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: radiocalico_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: radiocalico_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
      
      - name: Start server for integration tests
        run: |
          npm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: radiocalico_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
      
      - name: Run integration tests via Make
        run: make test-integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: radiocalico_test
          DB_USER: testuser
          DB_PASSWORD: testpassword
      
      - name: Upload Playwright test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: test-results/
          retention-days: 30

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run security audit via Make
        run: make security-audit
        continue-on-error: true
      
      - name: Run security tests via Make (fail on moderate+ vulnerabilities)
        run: make security-test
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build development image
        run: docker compose --profile development build
      
      - name: Build production image
        run: docker compose -f docker-compose.prod.yml build
      
      - name: Test development container
        run: |
          docker compose --profile development up -d
          sleep 15
          curl -f http://localhost:3000 || exit 1
          docker compose --profile development down

  all-checks:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [test, integration-tests, security, docker-build]
    if: always()
    
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [[ "${{ needs.test.result }}" == "success" && 
                "${{ needs.integration-tests.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.docker-build.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed"
            exit 1
          fi